# Everything that can be used by both bash and zsh

#
# PATH
#
export PATH=$PATH:/opt/homebrew/bin
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$GOPATH/bin
export GOBIN=$HOME/go/bin
export PATH=$PATH:$GOBIN

#
# Navigation
#

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias mkdir='mkdir -pv'
alias sl='ls'
eval "$(zoxide init zsh)"

#
# fzf based commands
#

# v - fuzzy preview and open files in nvim
# if there's stdin (e.g. `ls | v`), will view in nvim
function v() {
  if [ -t 0 ];
  then
    if [ -z "$1" ];
    then
      nvim -c "Telescope find_files"
    else
      # open directly
      nvim "$1"
    fi
  else
    nvim -R < /dev/stdin
  fi
}

# fd - cd to selected directory
function fd() {
  local dir
  dir=$(find "${1:-.}" -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir" || return
}

# fkill - kill process
function fkill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo "$pid" | xargs kill "-${1:-9}"
  fi
}

# fuzzy git branch selection
function fzf-git-branch() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    git branch --color=always --sort=-committerdate --format='%(if)%(HEAD)%(then)%(color:green)%(end)%(committerdate:relative)%09%(refname:short)%(color:reset)' |
        grep -v HEAD |
        fzf --height 50% --ansi --no-multi --preview-window right:65% \
            --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.*\t//" <<< {})' |
        sed "s/.*\t//"
}
function fzf-git-checkout() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    local branch

    branch=$(fzf-git-branch)
    if [[ "$branch" = "" ]]; then
        echo "No branch selected."
        return
    fi

    git checkout $branch;
}
function fzf-git-branch-delete() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    local branch

    branch=$(fzf-git-branch)
    if [[ "$branch" = "" ]]; then
        echo "No branch selected."
        return
    fi
    if [[ "$branch" = "master" ]]; then
        echo "Won't delete master."
        return
    fi
    if [[ "$branch" = "main" ]]; then
        echo "Won't delete main."
        return
    fi
    if [[ "$(git log --branches --not --remotes --pretty='format:%d' | rg \"$branch\")" != "" ]]; then
      echo "Branch '$branch' has unpushed commits, not deleting."
      return
    fi

    git branch -D $branch;
}
alias br=fzf-git-checkout
alias brd=fzf-git-branch-delete

# zoxide+fzf interactive dir navigation
function zz() {
  _ZO_FZF_OPTS="--height=100 --layout=default --info=hidden" zi
}

#Color ls output
export CLICOLOR=1
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx

# Extract most known archives with one command
function extract() {
  if [[ ! -f "$1" ]]
  then
     echo "'$1' is not a valid file"
  else
    case "$1" in
      *.tar.bz2)   tar xjf "$1"     ;;
      *.tar.gz)    tar xzf "$1"     ;;
      *.bz2)       bunzip2 "$1"     ;;
      *.rar)       unrar e "$1"     ;;
      *.gz)        gunzip "$1"      ;;
      *.tar)       tar xf "$1"      ;;
      *.tbz2)      tar xjf "$1"     ;;
      *.tgz)       tar xzf "$1"     ;;
      *.zip)       unzip "$1"       ;;
      *.Z)         uncompress "$1"  ;;
      *.7z)        7z x "$1"        ;;
      *)     echo "'$1' cannot be extracted 'extract'" ;;
    esac
  fi
}

#
# show remote server TLS cert
# first argument is the server, second is port (optional)
function remotecert() {
  address="$1"
  port="${2:-443}"
  echo | openssl s_client -showcerts -servername "$address" -connect "${address}:${port}" 2>/dev/null | openssl x509 -inform pem -noout -text
}

#
# recusive find/replace within all files
# works on mac's `find`, may not on linux
#
function findreplace() {
  match="$1"
  replacement="$2"
  find . -type f -exec sed -i '' s/"${match}"/"${replacement}"/g {} +
}

#
# Editor
#

export VISUAL=nvim
export EDITOR="$VISUAL"
alias nvimdiff="nvim -d"

#
# Programs
#

alias py='python'
alias k='kubectl'
alias vim='nvim'

#
# Homebrew
#
export HOMEBREW_NO_ANALYTICS=1


#
# Direnv
#
eval "$(direnv hook zsh)"

#
# Kubernetes
#
path_to_kubectl="$(which kubectl)"
if [ -x "$path_to_kubectl" ] ; then
  source <(kubectl completion zsh)
fi

#
# For host-specific extra that shouldn't be
# added in here (security, specificness, etc.)
#
if [[ -f $HOME/.shell_extra ]]
then
  source "$HOME/.shell_extra"
fi
